{"version":3,"sources":["components/input/MyButton.js","components/input/MyInput.js","components/card/LoginCard.js","components/sidebar/Sidebar.js","components/content/Panel.js","App.js","serviceWorker.js","index.js"],"names":["MyButton","props","label","className","onClick","type","value","MyInput","name","onEnter","autoFocus","autoComplete","error","useState","val","setValue","id","placeholder","onKeyDown","e","keyCode","onChange","target","LoginCard","loading","username","state","setState","loggedIn","login","data","document","getElementById","password","axios","method","url","then","response","token","localStorage","setItem","size","color","Sidebar","logout","console","log","window","location","pathname","to","exact","Panel","path","App","getItem","signed","setSigned","bind","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2188c6f5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const MyButton = (props) => {\r\n  const {\r\n    label = \"Button\",\r\n    className = \"\",\r\n    onClick = () => {}\r\n  } = props;\r\n  \r\n  return (\r\n    <div className={className}>\r\n      <input\r\n        className=\"my-input-button\"\r\n        type=\"button\"\r\n        value={label}\r\n        onClick={onClick}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport const MyInput = (props) => {\r\n  const {\r\n    name,\r\n    className = \"\",\r\n    type,\r\n    label = \"\",\r\n    onEnter = () => {},\r\n    autoFocus = false,\r\n    autoComplete = \"off\",\r\n    error = false,\r\n    value = \"\",\r\n  } = props;\r\n\r\n  const [val, setValue] = useState(value)\r\n  \r\n  return (\r\n    <div className={className}>\r\n      <input\r\n        value={val}\r\n        id={name}\r\n        name={name}\r\n        className=\"my-input-field\"\r\n        type={type}\r\n        placeholder={label}\r\n        autoFocus={autoFocus}\r\n        autoComplete={autoComplete}\r\n        onKeyDown={(e) => (e.keyCode === 13 ? onEnter() : \"\")}\r\n        onChange={(e) => setValue(e.target.value)}\r\n      />\r\n      {error ? <small className=\"error\">{label} required !</small> : \"\"}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\nimport { MyButton } from \"../input/MyButton\";\r\nimport { MyInput } from \"../input/MyInput\";\r\n\r\nexport const LoginCard = (props) => {\r\n  const [state, setState] = useState({\r\n    loading: false,\r\n    username: \"\",\r\n    error: \"\",\r\n  });\r\n  const { loading, username, error } = state;\r\n  const { loggedIn } = props;\r\n\r\n  function login() {\r\n    const data = {\r\n      username: document.getElementById(\"username\").value,\r\n      password: document.getElementById(\"password\").value,\r\n    };\r\n    if (!data[\"username\"]) {\r\n      setState({\r\n        loading: false,\r\n        username: state[\"username\"],\r\n        error: \"0\",\r\n      });\r\n      return;\r\n    }\r\n    if (!data[\"password\"]) {\r\n      setState({\r\n        loading: false,\r\n        username: data[\"username\"],\r\n        error: \"1\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setState({\r\n      loading: true,\r\n      username: data[\"username\"],\r\n      error: \"\",\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: \"http://192.168.43.24/v2/back/public/bek/login\",\r\n      data: data,\r\n    }).then(\r\n      (response) => {\r\n        const token = response.data[\"success\"][\"remember_token\"];\r\n        localStorage.setItem(\"token\", token);\r\n        loggedIn();\r\n      },\r\n      (error) => {\r\n        try {\r\n          setState({\r\n            loading: false,\r\n            username: data[\"username\"],\r\n            error: error.response[\"data\"][\"errors\"],\r\n          });\r\n        } catch (error) {\r\n          setState({\r\n            loading: false,\r\n            username: data[\"username\"],\r\n            error: \"Cannot connect to the server\",\r\n          });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"login-root\">\r\n      <div className=\"login-card\">\r\n        {loading ? (\r\n          <div className=\"sweet-loading\">\r\n            <BounceLoader size={50} color={\"#ff6768\"} loading={loading} />\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <span className=\"login-card-title\">Dark Lord</span>\r\n            <MyInput\r\n              label=\"Username\"\r\n              name=\"username\"\r\n              error={error === \"0\" ? true : false}\r\n              type=\"text\"\r\n              value={username}\r\n              className=\"input-login\"\r\n              onEnter={() => login()}\r\n            />\r\n            <MyInput\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              error={error === \"1\" ? true : false}\r\n              type=\"password\"\r\n              className=\"input-login\"\r\n              onEnter={() => login()}\r\n            />\r\n            {error && error !== \"0\" && error !== \"1\" ? (\r\n              <small className=\"error\">{error}</small>\r\n            ) : (\r\n              <></>\r\n            )}\r\n            <MyButton\r\n              label=\"Sign In\"\r\n              className=\"input-login\"\r\n              onClick={() => login()}\r\n            />\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { SiAircall, SiCodeforces } from \"react-icons/si\";\r\nimport {Link, NavLink, useRouteMatch} from \"react-router-dom\";\r\n\r\nimport {\r\n  BsCameraVideo,\r\n  BsGearFill,\r\n  BsFilm,\r\n  BsPeopleFill,\r\n  BsPower,\r\n  BsPeopleCircle,\r\n} from \"react-icons/bs\";\r\n\r\nexport default function Sidebar(props) {\r\n\r\n  const { logout } = props;\r\n  console.log(\"Path: \"+window.location.pathname)\r\n  return (\r\n    <div className=\"nav-container\">\r\n      <nav className={\"sidebar\"}>\r\n        <div className=\"text\">\r\n          <SiAircall className=\"primary leftIcon\" />\r\n          AnimeIndo\r\n        </div>\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/\" exact className=\"\">\r\n              <SiCodeforces className=\"leftIcon\" />\r\n              Dashboard\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/users\" className=\"\">\r\n              <BsPeopleFill className=\"leftIcon\" />\r\n              Users\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/admins\">\r\n              <BsPeopleCircle className=\"leftIcon\" />\r\n              Admins\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/anime\">\r\n              <BsCameraVideo className=\"leftIcon\" />\r\n              Anime\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/movie\">\r\n              <BsFilm className=\"leftIcon\" />\r\n              Movie\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/setting\">\r\n              <BsGearFill className=\"leftIcon\" />\r\n              App Setting\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/\" exact onClick={logout}>\r\n              <BsPower className=\"leftIcon\" />\r\n              Sign out\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\r\nimport { LineChart } from \"../chart/LineChart\";\r\nimport Sidebar from \"../sidebar/Sidebar\";\r\n\r\nexport const Panel = (props) => {\r\n  const { logout } = props;\r\n  return (\r\n    <Router>\r\n      <div className=\"panel-content\">\r\n        <Sidebar logout={logout}/>\r\n        <div className=\"panel-container\">\r\n          <Switch>\r\n            <Route path=\"/\" exact>Welcome To Dashboard</Route>\r\n            <Route path=\"/users\">Users</Route>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport { LoginCard } from \"./components/card/LoginCard\";\nimport { Panel } from \"./components/content/Panel\";\n\nexport const App = () => {\n  const [signed, setSigned] = useState(\n    localStorage.getItem(\"token\") ? true : false\n  );\n\n  function loggedIn() {\n    setSigned(true);\n  }\n\n  function logout() {\n    setSigned(false);\n    localStorage.setItem(\"token\", \"\");\n  }\n\n  return (\n    <div>\n      {signed ? (\n        <Panel logout={logout.bind(this)} />\n      ) : (\n        <LoginCard loggedIn={loggedIn.bind(this)} />\n      )}\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}